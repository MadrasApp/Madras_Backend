<?php defined('BASEPATH') OR exit('No direct script access allowed');
//Alireza Balvardi

class V2 extends CI_Controller {
	
	public $setting;
	function __construct(){
		
		parent::__construct();
		
		//if( ! $this->input->is_ajax_request() ) exit('No direct script access allowed');
				
		$this->load->model('m_user','user');
		$this->setting = $this->settings->data;			
	}
	public function index(){
        try {
            //if( ! $this->user->check_login() && $this->uri->segment(4) != 'login' )
            //throw new Exception("login needed" , -1);

            $arg = func_get_args();
			
			if(!isset($arg[0]))
				throw new Exception("Invalid request", 2);

            $method = $arg[0];

            if (!method_exists($this, $method))
                throw new Exception("Not found", 2);

            unset($arg[0]);

            call_user_func_array(array($this, $method), $arg);
        } catch (Exception $e) {
            $this->tools->outE($e);
        }
    }
	/*===================================
		USERS
	===================================*/
	public function register(){
		$data = $this->input->post();
		//$this->LogMe($data);
		
		if( empty($data) )
			throw new Exception("اطلاعات ارسالی صحیح نیست" , 1);
		
		$this->load->library('form_validation');
		$this->load->library('myformvalidator');
		
		$this->form_validation->set_rules('username'  , 'نام کاربری'  , 'trim|xss_clean|required|alpha_dash|is_unique[users.username]|min_length[4]|max_length[30]');
		$this->myformvalidator->set_rules('mobile'    , 'شماره همراه' , 'trim|xss_clean|required|valid_mobile|is_unique[users.tel]');
		$this->form_validation->set_rules('email'     , 'ایمیل'       , 'trim|xss_clean|required|valid_email|is_unique[users.email]');
		$this->form_validation->set_rules('password'  , 'گذرواژه'     , 'trim|xss_clean|required|min_length[4]|max_length[30]');
		$this->myformvalidator->set_rules('mac'       , 'mac'         , 'trim|xss_clean|required|valid_mac|is_unique[logged_in.mac]');
		
		if($this->form_validation->run() == FALSE)
			throw new Exception( implode('|',$this->form_validation->error_array()) , 2);
		
		$data = $this->input->post();
		
		//throw new Exception( $data['mac'], 2);

		$data = array(
			'username'    => $data['username'], 
			'displayname' => '', //$data['username'],
			'tel'         => $data['mobile'],
			'email'       => $data['email'],
			'password'    => do_hash($data['password']),
			'active'      => 1,
			'level'       => 'user',
			'date'        => date('Y-m-d H:i:s'),
			'last_seen'   => date('Y-m-d H:i:s'),
		);
		
		if( ! $this->db->insert('users',$data) )
			throw new Exception("خطا در انجام عملیات" , 4);
		
		
		$this->db->select('id,username,displayname as fullname,gender,age,email,tel,national_code');
		$this->db->select('birthday,city,state,postal_code,address,avatar,date');
		$this->db->where('id',$this->db->insert_id());
		$user = $this->db->get('users',1)->row();
		
		$this->load->helper('string');
		
		$token = random_string('alnum',32);
		$mac   = $this->input->post('mac');
		
		$this->db->insert('logged_in',[
			'user_id' => $user->id,
			'mac'     => $mac,
			'token'   => $token,
			'date'    => time()
		]);
		
		$re = array(
			'user'       => $user,
			'highlights' => [],
			'books'      => [],
			'notes'      => [],
			'sounds'     => [],
			'access'     => [
				'mac'    => $mac,
				'token'  => $token
			],
		);
		
		$this->tools->outS(0,"ثبت نام شما با موفقیت انجام شد",['data'=>$re]);
	}
	public function login(){
		$data = $this->input->post();
		
		if( empty($data) )
			throw new Exception("اطلاعات ارسالی صحیح نیست" , 1);
		
		$this->load->library('form_validation');
		$this->load->library('myformvalidator');
		
		$this->form_validation->set_rules('username'  , 'نام کاربری'  , 'trim|xss_clean|required');
		$this->form_validation->set_rules('password'  , 'گذرواژه'     , 'trim|xss_clean|required');
		$this->myformvalidator->set_rules('mac'       , 'mac'         , 'trim|xss_clean|required|valid_mac');
		
		if($this->form_validation->run() == FALSE)
			throw new Exception( implode('|',$this->form_validation->error_array()) , 2);
		
		$data = $this->input->post();

		$where = array(
			'username' => $data['username'],
			'password' => do_hash($data['password']),
		);
		
		$this->db->select('id,username,displayname as fullname,gender,age,email,tel,national_code');
		$this->db->select('birthday,city,state,postal_code,address,avatar,date');
		$this->db->where($where);
		$user = $this->db->get('users',1)->row();
		
		if(empty($user))
			throw new Exception("نام کاربری یا رمز عبور صحیح نیست" , 3);
		
		
		if($this->db->where('user_id',$user->id)->where('mac !=',$data['mac'])->count_all_results('logged_in'))	
			throw new Exception("امکان ورود به حساب همزمان با چند دستگاه وجود ندارد" , 4);
		
		$this->db->where('user_id',$user->id)->delete('logged_in');
		
		$this->load->helper('string');
		$token = random_string('alnum',32);
		
		//if($user->id == 10) $token = 'C36ZKdE02Nf89MIylUpbgL5VDnjArHmX';
		
		$mac = $this->input->post('mac');
		$this->db->where('mac',$mac)->delete('logged_in');
		
		$this->db->insert('logged_in',[
			'user_id' => $user->id,
			'mac'     => $mac,
			'token'   => $token,
			'date'    => time()
		]);
		
		$this->load->model('m_book','book');
		
		$re = array(
			'user'       => $user,
			'notes'      => $this->book->getUserNotes($user->id),
			'highlights' => $this->book->getUserHighlights($user->id),
			'sounds'     => $this->book->getUserfavSounds($user->id),
			'books'      => $this->book->getUserBooks($user->id),
			'access'     => [ 
				'mac'    => $mac,
				'token'  => $token
			],
		);
		
		$this->tools->outS(0,'OK',['data'=>$re]);
	}	
	public function logout(){
		$user = $this->_loginNeed();
		$this->db->where('user_id',$user->id)->delete('logged_in');
		
		$this->tools->outS(0,'OK');
	}
	public function resetPassword(){
		$email = $this->input->post('email');
	
		if( empty($email) )
			throw new Exception("اطلاعات ارسالی صحیح نیست" , 1);
		
		
		$this->load->library('form_validation');	
		$this->form_validation->set_rules('email', 'ایمیل', 'trim|xss_clean|required|valid_email');
		
		if($this->form_validation->run() == FALSE)
			throw new Exception( implode('|',$this->form_validation->error_array()) , 2);
			
		if( $this->db->where('email',$email)->count_all_results('users') != 1 )
			throw new Exception("کاربری با این ایمیل پیدا نشد" , 3);
				
		$new_pass = rand(10000,99999);
		
		$mail = "گذرواژه جدید شما $new_pass می باشد .
		با نام کاربری و گذرواژه جدید خود وارد شوید .";
		
		$hash_pass = do_hash($new_pass);
		
		if( ! $this->tools->sendEmail($email,"رمز جدید",$mail) )
			throw new Exception("در حال حاضر امکان ارسال ایمیل وجود ندارد" , 4);
		
		if( ! $this->db->where('email',$email)->update('users',array('password'=>$hash_pass)) )
			throw new Exception("خطا در انجام عملیات" , 5);
		
		$this->tools->outS(0,"گذرواژه جدید به ایمیل شما ارسال شد ");	
	}
	public function updateProfile(){	
		$data = $this->input->post();

		if( empty($data) )
			throw new Exception("اطلاعات ارسالی صحیح نیست" , 1);
		
		$user = $this->_loginNeed();
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		$this->load->library('form_validation');
		$this->load->library('myformvalidator');
		
		if($user->username != $data['username'])
		$this->form_validation->set_rules('username'  , 'نام کاربری'  , 'trim|xss_clean|required|alpha_dash|is_unique[users.username]|min_length[4]|max_length[30]');
		
		if($user->email == $data['email'])
		$this->form_validation->set_rules('email'         , 'ایمیل'        , 'trim|xss_clean|valid_email|required');	
		else	
		$this->form_validation->set_rules('email'         , 'ایمیل'        , 'trim|xss_clean|valid_email|required|is_unique[users.email]');
	
		if($user->tel == str_replace('+98','0',$data['mobile']))
		$this->myformvalidator->set_rules('mobile'        , 'موبایل'        , 'trim|xss_clean|required|valid_mobile');
		else
		$this->myformvalidator->set_rules('mobile'        , 'موبایل'        , 'trim|xss_clean|required|valid_mobile|is_unique[users.tel]');	
		
		$this->form_validation->set_rules('avatar'        , 'تصویر پروفایل' , 'trim');
		
		$this->form_validation->set_rules('fullname'      , 'نام'           , 'trim|xss_clean|max_length[50]');
		$this->form_validation->set_rules('password'      , 'گذرواژه'       , 'trim|xss_clean|required|min_length[4]|max_length[30]');
		$this->form_validation->set_rules('gender'        , 'جنسیت'         , 'trim|in_list[0,1]');
		$this->form_validation->set_rules('age'           , 'سن'            , 'trim');
		$this->form_validation->set_rules('national_code' , 'کدملی'         , 'trim|xss_clean|max_length[20]');
		$this->form_validation->set_rules('birthday'      , 'تارخ تولد'     , 'trim|xss_clean|max_length[20]');
		$this->form_validation->set_rules('city'          , 'شهر'           , 'trim|xss_clean|max_length[20]');
		$this->form_validation->set_rules('state'         , 'استان'         , 'trim|xss_clean|max_length[20]');
		$this->form_validation->set_rules('postal_code'   , 'کدپستی'        , 'trim|xss_clean|max_length[20]');
		$this->form_validation->set_rules('address'       , 'آدرس'          , 'trim|xss_clean|max_length[1000]');
		if( $this->form_validation->run() == FALSE )
			throw new Exception( implode('|',$this->form_validation->error_array()) , 2);
		
		$data = $this->input->post();
		
		$avatar = "";
		if(isset($data['avatar']) && $data['avatar'] != '')
		{
			$this->load->model('admin/m_media','media');
			$this->media->deleteFile($user->avatar);
			
			$image  = "profile-{$user->id}";
			$dir    = "uploads/_ac/";
			$resImg = $this->media->base64ToImg($data['avatar'],$image,$dir);
			$avatar = $dir. $resImg;
			
			$this->media->creatThumb($avatar);
		}
		
		$udata = array(
			'username'    => $data['username'],
			'email'       => $data['email'],
			'displayname' => $data['fullname'],
			'password'    => do_hash($data['password']) ,
			'avatar'      => $avatar,
			'gender'      => (int)$data['gender'],
			'age'         => (int)$data['age'],
			'tel'         => $data['mobile'],
			'national_code' => $data['national_code'],
			'birthday'    => $data['birthday'],
			'city'        => $data['city'],
			'state'       => $data['state'],
			'postal_code' => $data['postal_code'],
			'address'     => $data['address'],
		);
		
		if( ! $this->db->where('id',(int)$user->id)->update('users',$udata) )
			throw new Exception("خطا در انجام عملیات" , 3);
			
		$this->db->select('id,username,displayname as fullname,gender,age,email,tel,national_code');
		$this->db->select('birthday,city,state,postal_code,address,avatar,date');
		$this->db->where('id',$user->id);
		$user = $this->db->get('users',1)->row();
		
		$this->tools->outS(0,"اطلاعات به روز شد",['data'=>$user]);		
	}	
	/*===================================
		BOOKS
	===================================*/
	public function allbookList()
	{
		
		$user = $this->_loginNeed(TRUE,'u.id');
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		$price = (int)$this->input->post('price');
		$catid = (int)$this->input->post('catid');

		$category   = $this->db->where('id'     ,$catid)->get('category')->row();
		$categories = $this->db->order_by('parent,name ASC')->get('category')->result();
		$cats = array();
		$reversecats = array();
		$parentcategorys = array();
		$parentcategoryid = array();
		foreach($categories as $k=>$v){
			$prefix = "";
			if(isset($cats[$v->parent])){
				$prefix = $cats[$v->parent]." » ";
				$parentcategorys[$v->id] = $cats[$v->parent];
				$parentcategoryid[$v->id] = $v->parent;
				$reversecats[$v->parent][] = $v->id;
			}
			$cats[$v->id] = $prefix.$v->name;
		}
		if($catid){
			if(isset($parentcategoryid[$catid])){
				$xcatid = $parentcategoryid[$catid];
			} elseif(isset($reversecats[$catid])){
				$xcatid = implode(",",$reversecats[$catid]);
			}
		}
		$ids = array();
		switch($price){
			case 1 :
				$this->db->select("m.post_id");
				$this->db->where("m.meta_key='price'");
				$this->db->where("m.meta_value = '0'");
				$result = $this->db->get('post_meta m')->result();
		
				$ids = array(0);
				foreach($result as $row)
					$ids[] = $row->post_id;
			break;
			case 2 :
				$this->db->select("m.post_id");
				$this->db->where("m.meta_key='price'");
				$this->db->where("m.meta_value != '0'");
				$result = $this->db->get('post_meta m')->result();
		
				$ids = array(0);
				foreach($result as $row)
					$ids[] = $row->post_id;
			break;
		}
		$this->db->select('p.id,p.title,p.excerpt description,p.category parentcategoryid,p.category parentcategoryname,p.category categoryid,p.category categoryname,p.thumb,m.meta_value price');
		$this->db->join('ci_post_meta m',"(m.meta_key='price' AND m.post_id = p.id)",'right',FALSE);
		if($catid)
		$this->db->where("(p.category = $catid OR p.category IN($xcatid) )");
		$this->db->where("p.published = 1");
		$this->db->order_by('p.title ASC');
		if(count($ids))
		$this->db->where("p.id IN (".implode(",",$ids).")");
		//$this->db->limit(5,0);
		$books = $this->db->get('posts p')->result();
		foreach($books as $k=>$v){
			$books[$k]->categoryname = $cats[$v->categoryname];
			$books[$k]->parentcategoryname = $parentcategorys[$v->parentcategoryname];
			$books[$k]->parentcategoryid = $parentcategoryid[$v->parentcategoryid];
		}
		$this->tools->outS(0,'OK',['books'=>$books]);
	}	
	public function bookList()
	{
		$user = $this->_loginNeed(TRUE,'u.id');
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		$this->load->model('m_book','book');
		
		$books = $this->book->getUserBooks($user->id);
		
		$this->tools->outS(0,'OK',['books'=>$books]);
	}	
	
	public function getPrice($case='level',$id)
	{
		$user_id = NULL;
		$user    = $this->_loginNeed(TRUE, 'u.id');
		
		if($user === FALSE)
			$user = $this->_loginNeed(FALSE, 'u.id');
		
		if(isset($user->id))
			$user_id = $user->id;
		
		$this->load->model('m_book','book');
		
		if($case == 'book')
		{
			$ids    = explode('-', $id);
			$price  = $this->book->getBookPrice($ids);
			$result = [
				'price'       => $price,
				'discount'    => 0,
				'final_price' => $price 
			];
		}
		else
		{
			$id = (int)$id;
			
			if($this->db->where('id',$id)->where('type','book')->count_all_results('category') == 0)
				throw new Exception("شماره سطح صحیح نیست", 1);
			
			$discountCode = $this->input->post('code');
			
			if($discountCode == NULL)
				$discountCode = $this->input->get('code');
			
			if($discountCode != NULL)
			{
				if(!$user_id)
					throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
				
				$discount_id = $this->book->checkDiscountCode($discountCode,$id,$user_id);
				
				if(!is_numeric($discount_id))
					throw new Exception($discount_id,1);
				
				$result = $this->book->getCategoryPrice($id, $user_id, $discount_id);
			}
			else
			{
				$result = $this->book->getCategoryPrice($id, $user_id);
			}
		}
		
		$this->tools->outS(0,NULL,['data'=>$result]);
	}
	
	public function getCategoryArray($parent=0,$post_type='book')
	{
        $categories = $this->post->getCategoryArray((int)$parent,$post_type);
        //$categories = $this->post->setCategoryPostsCount($categories);
		$this->tools->outS(0,NULL,['data'=>$categories]);
	}

    public function getCategoryBooks($category=NULL)
    {
        if($category === NULL)
        {
            $posts = [];
        }
        else
        {
            if(strpos($category, '-') != FALSE)
                $category = explode('-',$category);
            else
                $category = (int) $category;
			
			if(empty($category) OR !$category)
				$posts = [];
			else
			{
				$posts = $this->post->getPosts([
					'type'     => 'book',
					'category' => $category,
					'order'    => 'p.date_modified desc'
				]);
			}
        }
        $this->tools->outS(0,NULL,['data'=>$posts]);
    }
	
	public function getBook($id=NULL,$type='zip')
	{
		
		$this->output->set_header('Last-Modified: ' . gmdate("D, d M Y H:i:s") . ' GMT');
		$this->output->set_header('Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0');
		$this->output->set_header('Pragma: no-cache');
		$this->output->set_header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");

		$id = (int)$id;
		$filename = md5($id);
		
		if($this->db->where('id',$id)->where('type','book')->count_all_results('posts') == 0)
			throw new Exception("Invalid book id", 2);
			
		
		if($this->db->where('id',$id)->where('type','book')->where('published',1)->count_all_results('posts') == 0)
			throw new Exception("This book is not active", 1);
		
		$this->load->model('m_book','book');
		
		//get the book info	
		$book = $this->post->getPosts([
			'type'     => 'book',
			'order'    => 'p.date_modified desc',
			'where'    => ['p.id'=>$id],
			'limit'    => 1
		])[0];
		
		$data['book'] = $book;
		
		//get the book indexes
		$data['indexes'] = $this->book->getBookIndexesById($id);
		
		
		//get the book parts
		$data['parts'] = $this->book->getBookPartsById($id);
		
		$data['tests'] = $this->book->getBookTests($id);
		
		foreach($data['parts'] as $pk=>$part)
		{
			$data['parts'][$pk]->description = base64_encode($part->description);
		}
		
		$data['tests'] = base64_encode($this->MakeJSON($data['tests']));
		
		
		if($type == 'json')
			return $this->tools->outS(0,NULL,['data'=>$data]);

		$this->load->library('zip');	
		
		/*
		 *
		 *
		if(isset($book->sample_questions) && ! empty($book->sample_questions))
		{
			foreach ($book->sample_questions as $ak=>$attachment)
			{
				$baseName = 'sample_questions/' . basename($attachment['path']);
				$this->zip->read_file($attachment['path'],$baseName);
				$book->sample_questions[$ak]['path'] = $baseName;
			}
		}
		
		if(isset($book->attachments) && ! empty($book->attachments))
		{
			foreach ($book->attachments as $ak=>$attachment)
			{
				$baseName = 'attachments/' . basename($attachment['path']);
				$this->zip->read_file($attachment['path'],$baseName);
				$book->attachments[$ak]['path'] = $baseName;
			}
		}
		 *
		 */
		 
		$this->zip->add_data('info.json'    , $this->MakeJSON($data['book']));
		$this->zip->add_data('content.json' , $this->MakeJSON($data['parts']));
		$this->zip->add_data('tests.json'   , $data['tests']);
		$this->zip->add_data('index.json'   , $this->MakeJSON($data['indexes']));
		
		
		$temp = 'temp/book/' . $filename . '.zip';
		
		$this->zip->archive($temp);
		
		$filesize = filesize($temp);
	
		header('Content-Type: application/x-zip');
		header('Content-Disposition: attachment; filename="'.$filename.'.zip"');
		header('Expires: 0');
		header('Content-Transfer-Encoding: binary');
		header('Content-Length: ' . $filesize);
		header("Content-Range: 0-".($filesize-1)."/".$filesize);
		header('Pragma: no-cache');
		
		readfile($temp);
		
		@unlink($temp); 
		exit;
		
		//$this->zip->download($filename);
	}
	
	public function getBookInfo($id=NULL)
	{
		$id = (int)$id;
		
		if($this->db->where('id',$id)->where('type','book')->count_all_results('posts') == 0)
			throw new Exception("Invalid book id", 2);
			
		
		if($this->db->where('id',$id)->where('type','book')->where('published',1)->count_all_results('posts') == 0)
			throw new Exception("This book is not active", 1);
		
		$book = $this->post->getPosts([
			'type'     => 'book',
			'order'    => 'p.date_modified desc',
			'where'    => ['p.id'=>$id],
			'limit'    => 1
		])[0];
		
		$this->tools->outS(0,NULL,['data'=>['book'=>$book]]);
	}
	
	public function buyBook()
	{	
		$user = $this->_loginNeed();
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		$book_id  = (int)$this->input->post('book_id');
		$level_id = (int)$this->input->post('level_id');
		$discount_id  = NULL;
		
		if(!$book_id && !$level_id)
			throw new Exception("شماره کتاب یا شماره سطح الزامی است", 1);
		
		$this->load->model('m_book','book');
		
		if($book_id)
		{
			if($this->db->where('id',$book_id)->where('type','book')->count_all_results('posts') == 0)
				throw new Exception("شماره کتاب صحیح نمی باشد", 2);
				
			if($this->db->where('id',$book_id)->where('type','book')->where('published',1)->count_all_results('posts') == 0)
				throw new Exception("این کتاب درحال حاضر در دسترس نیست", 3);
			
			if($this->book->isBought($user->id,$book_id))
				throw new Exception("کتاب قبلا خریداری شده است", 4);
			
			$cf = $this->book->createFactor($user->id,$book_id);
		}
		else
		{
			if($this->db->where('id',$level_id)->where('type','book')->count_all_results('category') == 0)
				throw new Exception("شماره سطح صحیح نمی باشد", 2);
			
			$isFirstLevel = $this->db->where('id',$level_id)->where('parent',0)->count_all_results('category');
			
			$discountCode = $this->input->post('code');
			
			if($isFirstLevel)
			{
				/*if($discountCode == '')
					throw new Exception("کد تخفیف را ارسال کنید", 5);
				
				$discount = $this->db->where('code',$discountCode)->get('discounts')->row();
				
				if(!isset($discount->id) OR $discount->used == 1)
					throw new Exception("کد تخفیف وارد شده معتبر نیست", 5);
				
				if($discount->category_id != $level_id)
					throw new Exception("کد تخفیف وارد شده برای خرید این سطح نیست", 5);
				
				$discount_id = $discount->id;*/
				
				$discount_id = $this->book->checkDiscountCode($discountCode,$level_id,$user->id);
				
				if(!is_numeric($discount_id))
					throw new Exception($discount_id,1);
			}
			
			$cf = $this->book->createFactor($user->id,NULL,$level_id,$discount_id);
		}
		
		if($cf['done'] == FALSE)
			throw new Exception($cf['msg'], 5);
		
		$factor = $cf['factor'];
		$data   = ['factor' => $factor];
		
		
		if($factor->price == 0)
		{
			$this->book->updatetFactor($factor->id,[
				'state'  => $discount_id != NULL ?  "خرید کامل با کد تخفیف (<span class=\"text-warning\">{$discountCode}</span>)":'کتاب رایگان',
				'status' => 0,
				'pdate'  => time()
			]);
			
			if($discount_id != NULL)
				$this->book->setDiscountUsed($discount_id,$factor->id);
			
			$data['free'] = TRUE;
			$data['link'] = NULL;
			
		}else
			$data['link'] = site_url('payment/pay/' . $factor->id);
		
		$this->tools->outS(0,"فاکتور ایجاد شد",['data'=>$data]);		
	}

	public function	getUserBooks($user_id=NULL)
	{
		$user_id = (int)$user_id;
		
		if($this->db->where('id',$user_id)->count_all_results('users') == 0)
			throw new Exception("Invalid user id", 1);
		
		$this->load->model('m_book','book');
		
		$books = $this->book->getUserBooks($user_id);
		
		$this->tools->outS(0,NULL,['data'=>$books]);
	}
	
	public function getPartData()
	{
		$user = $this->_loginNeed();
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		$part_id = (int)$this->input->post('id');
		$case    = $this->input->post('case');
		
		if(!in_array($case,['description','sound']))
			throw new Exception("درخواست نا معتبر می باشد", 1);
		
		if($this->db->where('id',$part_id)->count_all_results('book_meta')==0)
			throw new Exception("شماره پاراگراف نامعتبر است", 2);
		
		$this->db->select('id,book_id');
		$this->db->select($case);
		$this->db->where('id',$part_id);
		$part = $this->db->get('book_meta',1)->row();
		
		$this->load->model('m_book','book');
		
		if(!$this->book->isBought($user->id,$part->book_id))
			throw new Exception("کتاب خریداری نشده است", 3);
		
		if(!isset($part->{$case}) OR empty($part->{$case}))
			throw new Exception("فیلد مورد نظر خالی است", 4);
		 
		if($case == 'sound')
		{
			if(!file_exists($part->sound)) 
				throw new Exception("فایل مورد نظر در سرور وجود ندارد", 5);
			
			//$this->load->helper('download');
			//force_download($part->sound,NULL);
			$this->tools->outS(0,NULL,['data'=> base_url() . $part->sound]);
		}
		else
		{
			$this->tools->outS(0,NULL,['data'=>$part->{$case}]);	
		}
	}
	
	public function getPartSound($part_id=NULL)
	{
		$user = $this->_loginNeed(FALSE);
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		$part_id = (int)$part_id;
		
		if($this->db->where('id',$part_id)->count_all_results('book_meta')==0)
			throw new Exception("شماره پاراگراف نامعتبر است", 2);
		
		$this->db->select('id,book_id,sound');
		$this->db->where('id',$part_id);
		$part = $this->db->get('book_meta',1)->row();
		
		$this->load->model('m_book','book');
		
		if(!$this->book->isBought($user->id,$part->book_id))
			throw new Exception("کتاب خریداری نشده است", 3);
		
		if(!isset($part->sound) OR empty($part->sound))
			throw new Exception("فیلد مورد نظر خالی است", 4);
		
		if(!file_exists($part->sound)) 
			throw new Exception("فایل مورد نظر در سرور وجود ندارد", 5);
		
		//$this->load->helper('download');
		//force_download($part->sound,NULL);
		
		$this->tools->outS(0,NULL,['data' => base_url() . $part->sound]);
	}
	
		
	public function getPdf($book_id=0,$request='')
	{
		$password = $this->input->get('mac');
		$book_id  = (int)$book_id;
		$user     = $this->_loginNeed(FALSE);
		
		if($password == '' OR $request == '' && $book_id == 0)
			throw new Exception("اطلاعات ارسالی صحیح نمی باشد", 1);
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		$this->load->model('m_book','book');
		
		if(!$this->book->isBought($user->id,$book_id))
			throw new Exception("این کتاب در لیست کتابهای خریداری شده شما نیست", 1);	
		
		$meta = $this->db->select('meta_value')->where(['post_id'=>$book_id, 'meta_key'=>'dl_book'])->get('post_meta',1)->row();
		
		if(empty($meta))
			throw new Exception("کتاب مورد نظر پیدا نشد", 1);
		
		$meta = $meta->meta_value;
		
		$meta = $this->tools->jsonDecode($meta);
		
		if(!is_array($meta) && !is_object($meta))
			throw new Exception("اطلاعات این بخش از کتاب دچار مشکل شده و قابل خواندن نیست", 1);

		$file = NULL;
		foreach ($meta as $attachment)
		{
			if(md5($attachment['file']) . sha1($attachment['file']) == $request)
			{
				$file = $attachment['file'];
				break;
			}
		}
		
		if($file === NULL)
			throw new Exception("فایل درخواستی در لیست فایلهای این کتاب نیست", 1);
		
		if(!file_exists($file))
			throw new Exception("فایل مورد نظر از سرور حذف شده است", 1);
		
		
		require_once('fpdi/FPDI_Protection.php');

		$pdf = new FPDI_Protection();

		$pagecount = $pdf->setSourceFile($file);

		for ($loop = 1; $loop <= $pagecount; $loop++) 
		{
			$tpl = $pdf->importPage($loop);
			$pdf->addPage();
			$pdf->useTemplate($tpl);
		}
		
		$pdf->SetProtection(array(),$password);
		$pdf->Output();
	}
	
	/*===================================
		NOTES HIGHLIGHTS 
	===================================*/
	public function addNote(){
		$user = $this->_loginNeed();
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);	
		
		$this->form_validation->set_rules('text_id'        , 'شماره پاراگراف'  , 'trim|required|numeric');
		$this->form_validation->set_rules('not_text'       , 'متن'             , 'trim|xss_clean|required');
		$this->form_validation->set_rules('not_text_user'  , 'یادداشت'         , 'trim|xss_clean|required');
		$this->form_validation->set_rules('title'          , 'عنوان'           , 'trim|required|max_length[255]');
		$this->form_validation->set_rules('notstart'       , 'شروع'            , 'trim|required|numeric');
		$this->form_validation->set_rules('end'            , 'پایان'           , 'trim|required|numeric');
		$this->form_validation->set_rules('sharh'          , 'شرح'             , 'trim|required|numeric');
		
		if( $this->form_validation->run() == FALSE )
			throw new Exception( implode('|',$this->form_validation->error_array()) , 1);
		
		$data = $this->input->post();
		
		$data = array(
			'part_id'   => $data['text_id'],
			'user_id'   => $user->id,
			'title'     => $data['title'],
			'text'      => $data['not_text'],
			'user_text' => $data['not_text_user'],
			'start'     => $data['notstart'],
			'end'       => $data['end'],
			'sharh'     => $data['sharh']
		);
		
		if($this->db->where('id',$data['part_id'])->count_all_results('book_meta')==0)
			throw new Exception("شماره پاراگراف اشتباه است", 2);
		
		if(!$this->db->insert('notes',$data))
			throw new Exception("خطا در ثبت اطلاعات", 3);
		
		$re = [
			'data' => [
				'insert_id' => $this->db->insert_id()
			]
		];
		
		$this->tools->outS(0,"یادداشت ثبت شد",$re);
	}
	public function addHighlight(){
		$user = $this->_loginNeed();
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);	
		
		
		$this->form_validation->set_rules('text_id'         , 'شماره پاراگراف'  , 'trim|required|numeric');
		$this->form_validation->set_rules('highlight_color' , 'رنگ'             , 'trim|required|numeric');
		$this->form_validation->set_rules('highlight_text'  , 'متن'             , 'trim|required|xss_clean');
		$this->form_validation->set_rules('highlight_start' , 'شروع'            , 'trim|required|numeric');
		$this->form_validation->set_rules('highlight_end'   , 'پایان'           , 'trim|required|numeric');
		$this->form_validation->set_rules('sharh'           , 'شرح'             , 'trim|required|numeric');
		 
		if( $this->form_validation->run() == FALSE )
			throw new Exception( implode('|',$this->form_validation->error_array()) , 1);
		
		$data = $this->input->post();
		
		$data = array(
			'part_id'   => $data['text_id'],
			'user_id'   => $user->id,
			'text'      => $data['highlight_text'],
			'color'     => $data['highlight_color'],
			'start'     => $data['highlight_start'],
			'end'       => $data['highlight_end'],
			'sharh'     => $data['sharh']
		);
		
		if($this->db->where('id',$data['part_id'])->count_all_results('book_meta')==0)
			throw new Exception("شماره پاراگراف اشتباه است", 2);
		
		if(!$this->db->insert('highlights',$data))
			throw new Exception("خطا در ثبت اطلاعات", 3);
		
		$re = [
			'data' => [
				'insert_id' => $this->db->insert_id()
			]
		];
		
		$this->tools->outS(0,"یادداشت ثبت شد",$re);
	}
	public function addfavSound(){
		$user = $this->_loginNeed();
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);	
		
		$this->form_validation->set_rules('text_id' , 'شماره پاراگراف'  , 'trim|required|numeric');
		 
		if( $this->form_validation->run() == FALSE )
			throw new Exception( implode('|',$this->form_validation->error_array()) , 1);
		
		$part_id = (int)$this->input->post('text_id');
		
		$data = array(
			'part_id'   => $part_id,
			'user_id'   => $user->id,
		);
		
		if($this->db->where('id',$part_id)->count_all_results('book_meta')==0)
			throw new Exception("شماره پاراگراف اشتباه است", 2);
		
		if($this->db->where('id',$part_id)->where('sound IS NOT NULL')->count_all_results('book_meta')==0)
			throw new Exception("پاراگراف مورد نظر صوت ندارد", 3); 
		
		if($this->db->where($data)->count_all_results('fav_sounds')==1)
			throw new Exception("قبلا به لیست صوت های محبوب اضافه شده است", 4);
		
		if(!$this->db->insert('fav_sounds',$data))
			throw new Exception("خطا در ثبت اطلاعات", 5);
		
		$re = [
			'data' => [
				'insert_id' => $this->db->insert_id()
			]
		];
		
		$this->tools->outS(0,"به لیست صوت های محبوب اضافه شد",$re);
	}
	public function deleteItem(){
		$user = $this->_loginNeed();
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		
		$this->form_validation->set_rules('id'    , 'شماره ID' , 'trim|required|numeric');
		$this->form_validation->set_rules('item'  , 'آیتم'     , 'trim|required|in_list[sound,highlight,note]');
		
		if( $this->form_validation->run() == FALSE )
			throw new Exception( implode('|',$this->form_validation->error_array()) , 1);
		
		
		$id    = (int)$this->input->post('id');
		$item  = $this->input->post('item');
		$table = '';
		
		switch($item){
			case 'sound':      $table = 'fav_sounds'; break;
			case 'highlight':  $table = 'highlights'; break;
			case 'note':       $table = 'notes';      break;
		}
		
		$this->db->where('user_id',(int)$user->id);
		$this->db->where('id',$id);
		
		if(!$this->db->delete($table))
			throw new Exception("خطا در حذف", 5);
		
		$this->tools->outS(0,"حذف شد");
	}
	public function HNS(){
		$user = $this->_loginNeed();
		
		if($user === FALSE)
			throw new Exception("برای دسترسی به این بخش باید وارد حساب کاربری خود شوید" , -1);
		
		
		$this->form_validation->set_rules('data' , 'data' , 'trim|required');
		
		if( $this->form_validation->run() == FALSE )
			throw new Exception( implode('|',$this->form_validation->error_array()) , 1);
		
		
		$data = $this->input->post('data');
		
		
		$data = $this->tools->jsonDecode($data);
		
		
		if(!is_array($data) && !is_object($data))
			throw new Exception("اطلاعات ارسالی ناقص می باشد. امکان پردازش اطلاعات وجود ندارد.", 2);
		
		//================== highlights ================//
		if($this->_checkJsonArray($data,'highlights'))
		{
			if($this->_checkJsonArray($data['highlights'],'added'))
			{
				foreach($data['highlights']['added'] as $k=>$h)
				{
					$result = $this->_add_edit_h($h, $user->id, 'add');
					
					$re = array('highlight_id' => $h['highlight_id']);
					
					if(is_numeric($result))
					{
						$re['done']   = TRUE;
						$re['new_id'] = $result;
					}
					else
					{
						$re['done']   = FALSE;
						$re['error']  = $result;
					}
					$data['highlights']['added'][$k] = $re;
				}
			}
			
			if($this->_checkJsonArray($data['highlights'],'edited'))
			{
				foreach($data['highlights']['edited'] as $k=>$h)
				{
					$result = $this->_add_edit_h($h, $user->id, 'edit');
					
					$re = array('highlight_id' => $h['highlight_id']);
					
					if($result === TRUE)
					{
						$re['done']   = TRUE;
					}
					else
					{
						$re['done']   = FALSE;
						$re['error']  = $result;
					}
					$data['highlights']['edited'][$k] = $re;					
				}
			}
			
			if($this->_checkJsonArray($data['highlights'],'deleted'))
			{
				foreach($data['highlights']['deleted'] as $k=>$h)
				{
					$re = array('highlight_id' => $h);
					
					$this->db->where('id',(int)$h);
					$this->db->where('user_id', $user->id);
					
					if($this->db->count_all_results('highlights') == 0)
					{
						$re['done']  = FALSE;
						$re['error'] = 'آیتم مورد نظر پیدا نشد.';						
					}	
					else
					{
						$this->db->where('id',(int)$h)->delete('highlights');
						$re['done']  = TRUE;
					}
					$data['highlights']['deleted'][$k] = $re;
				}
			}			
		}
		
		//================== nots ================//
		if($this->_checkJsonArray($data,'notes'))
		{
			if($this->_checkJsonArray($data['notes'],'added'))
			{
				foreach($data['notes']['added'] as $k=>$n)
				{
					$result = $this->_add_edit_n($n, $user->id, 'add');
					
					$re = array('not_id' => $n['not_id']);
					
					if(is_numeric($result))
					{
						$re['done']   = TRUE;
						$re['new_id'] = $result;
					}
					else
					{
						$re['done']   = FALSE;
						$re['error']  = $result;
					}
					$data['notes']['added'][$k] = $re;
				}
			}
			
			if($this->_checkJsonArray($data['notes'],'edited'))
			{
				foreach($data['notes']['edited'] as $k=>$n)
				{
					$result = $this->_add_edit_n($n, $user->id, 'edit');
					
					$re = array('not_id' => $n['not_id']);
					
					if($result === TRUE)
					{
						$re['done']   = TRUE;
					}
					else
					{
						$re['done']   = FALSE;
						$re['error']  = $result;
					}
					$data['notes']['edited'][$k] = $re;					
				}
			}
			
			if($this->_checkJsonArray($data['notes'],'deleted'))
			{
				foreach($data['notes']['deleted'] as $k=>$n)
				{
					$re = array('not_id' => $n);
					
					$this->db->where('id',(int)$n);
					$this->db->where('user_id', $user->id);
					
					if($this->db->count_all_results('notes') == 0)
					{
						$re['done']  = FALSE;
						$re['error'] = 'آیتم مورد نظر پیدا نشد.';						
					}	
					else
					{
						$this->db->where('id',(int)$n)->delete('notes');
						$re['done']  = TRUE;
					}
					$data['notes']['deleted'][$k] = $re;
				}
			}			
		}
		
		//================== sounds ================//
		if($this->_checkJsonArray($data,'notes'))
		{
			if($this->_checkJsonArray($data['sounds'],'added'))
			{
				foreach($data['sounds']['added'] as $k=>$s)
				{
					$error   = NULL;
					$part_id = (int)$s['text_id'];
					
					$sData   = [
						'part_id'   => $part_id,
						'user_id'   => $user->id,
					];
					
					if($this->db->where('id',$part_id)->count_all_results('book_meta')==0)
						$error = "شماره پاراگراف اشتباه است";
					
					if($error === NULL && $this->db->where('id',$part_id)->where('sound IS NOT NULL')->count_all_results('book_meta')==0)
						$error = "پاراگراف مورد نظر صوت ندارد"; 
					
					if($error === NULL && $this->db->where($sData)->count_all_results('fav_sounds')==1)
						$error = "قبلا به لیست صوت های محبوب اضافه شده است";
					
					if($error === NULL && !$this->db->insert('fav_sounds',$sData))
						$error = "خطا در ثبت اطلاعات";
					
					if($error === NULL)
						$re = [
							'text_id' => $part_id,
							'done'    => TRUE
						];
					else 
						$re = [
							'text_id' => $part_id,
							'done'    => FALSE,
							'error'   => $error
						];
						
					$data['sounds']['added'][$k] = $re;
				}
			}
			if($this->_checkJsonArray($data['sounds'],'deleted'))
			{
				foreach($data['sounds']['deleted'] as $k=>$s)
				{
					$re = array('text_id' => (int)$s);
					
					$this->db->where('part_id',(int)$s);
					$this->db->where('user_id', $user->id);
					
					if($this->db->count_all_results('fav_sounds') == 0)
					{
						$re['done']  = FALSE;
						$re['error'] = 'آیتم مورد نظر پیدا نشد.';						
					}	
					else
					{
						$this->db->where('part_id',(int)$s)->delete('fav_sounds');
						$re['done']  = TRUE;
					}
					$data['sounds']['deleted'][$k] = $re;
				}
			}			
		}
		
		
		/*$this->output
            ->set_content_type('application/json')
            ->set_status_header(200)
            ->set_output($this->MakeJSON($data));*/
		
		$this->tools->outS(0,NULL,['result'=>$data]);
	}
	private function _checkJsonArray($data,$name){
		return (isset($data[$name]) && (is_array($data[$name]) OR is_object($data[$name])));
	}
	private function _add_edit_h($data,$user_id,$action = 'add'){
		
		$this->form_validation->set_data($data);
		
		if($action == 'add')
		$this->form_validation->set_rules('text_id'         , 'شماره پاراگراف'  , 'trim|required|numeric');
		else
		$this->form_validation->set_rules('highlight_id'    , 'ID'              , 'trim|required|numeric');
	
		$this->form_validation->set_rules('highlight_color' , 'رنگ'             , 'trim|required|numeric');
		$this->form_validation->set_rules('highlight_text'  , 'متن'             , 'trim|required|xss_clean');
		$this->form_validation->set_rules('highlight_start' , 'شروع'            , 'trim|required|numeric');
		$this->form_validation->set_rules('highlight_end'   , 'پایان'           , 'trim|required|numeric');
		$this->form_validation->set_rules('sharh'           , 'شرح'             , 'trim|required|numeric');
		 
		if( $this->form_validation->run() == FALSE )
			return  implode('|',$this->form_validation->error_array());
		
		$newData = array(
			'part_id'   => @$data['text_id'],
			'user_id'   => $user_id,
			'text'      => $data['highlight_text'],
			'color'     => $data['highlight_color'],
			'start'     => $data['highlight_start'],
			'end'       => $data['highlight_end'],
			'sharh'     => $data['sharh']
		);
		
		if($action == 'edit')
			unset($newData['part_id']);
		
		if($action == 'add' && $this->db->where('id',$newData['part_id'])->count_all_results('book_meta')==0)
			return "شماره پاراگراف اشتباه است";
		
		if($action == 'edit'){
			
			$this->db->where('id', (int)$data['highlight_id']);
			$this->db->where('user_id', $user_id);
			if($this->db->count_all_results('highlights') == 0)
				return 'آیتم مورد نظر پیدا نشد.';
			
			$this->db->where('id', (int)$data['highlight_id']);
			$this->db->where('user_id', $user_id);
		}
			
		
		$do = $action == 'add' ? 'insert':'update';
		
		if(!$this->db->{$do}('highlights',$newData))
			return "خطا در ثبت اطلاعات";
		
		return $action == 'add' ?  $this->db->insert_id():TRUE;
	}
	private function _add_edit_n($data,$user_id,$action = 'add'){
		
		$this->form_validation->set_data($data);
		
		if($action == 'add')
		$this->form_validation->set_rules('text_id'        , 'شماره پاراگراف'  , 'trim|required|numeric');
		else
		$this->form_validation->set_rules('not_id'         , 'ID'              , 'trim|required|numeric');
	
		$this->form_validation->set_rules('not_text'       , 'متن'             , 'trim|xss_clean|required');
		$this->form_validation->set_rules('not_text_user'  , 'یادداشت'         , 'trim|xss_clean|required');
		$this->form_validation->set_rules('title'          , 'عنوان'           , 'trim|required|max_length[255]');
		$this->form_validation->set_rules('notstart'       , 'شروع'            , 'trim|required|numeric');
		$this->form_validation->set_rules('end'            , 'پایان'           , 'trim|required|numeric');
		$this->form_validation->set_rules('sharh'          , 'شرح'             , 'trim|required|numeric');
		 
		if( $this->form_validation->run() == FALSE )
			return  implode('|',$this->form_validation->error_array());
		
		$newData = array(
			'part_id'   => @$data['text_id'],
			'user_id'   => $user_id,
			'title'     => $data['title'],
			'text'      => $data['not_text'],
			'user_text' => $data['not_text_user'],
			'start'     => $data['notstart'],
			'end'       => $data['end'],
			'sharh'     => $data['sharh']
		);
		
		if($action == 'edit')
			unset($newData['part_id']);
		
		if($action == 'add' && $this->db->where('id',$newData['part_id'])->count_all_results('book_meta')==0)
			return "شماره پاراگراف اشتباه است";
		
		if($action == 'edit'){
			$this->db->where('id', (int)$data['not_id']);
			$this->db->where('user_id', $user_id);
			if($this->db->count_all_results('notes') == 0)
				return 'آیتم مورد نظر پیدا نشد.';
			
			$this->db->where('id', (int)$data['not_id']);
			$this->db->where('user_id', $user_id);
		}
		
		$do = $action == 'add' ? 'insert':'update';
		
		if(!$this->db->{$do}('notes',$newData))
			return "خطا در ثبت اطلاعات";
		
		return $action == 'add' ?  $this->db->insert_id():TRUE;
	}
	public function hnsExample(){
		$data = [];  

		$data['highlights']['added'][] = [
			'highlight_id'    => 1,
			'text_id'         => 514,
			'highlight_text'  => 'text',
			'highlight_color' => 1,
			'highlight_start' => 10,
			'highlight_end'   => 20,
			'sharh'           => 'sharh'
		];
		$data['highlights']['edited'][] = [
			'highlight_id'    => 1234,
			//'text_id'         => 514,
			'highlight_text'  => 'text',
			'highlight_color' => 1,
			'highlight_start' => 10,
			'highlight_end'   => 20,
			'sharh'           => 'sharh'	
		];
		$data['highlights']['deleted'] = [10,11,12,13];
		
		//============== notes ===================//
		$data['notes']['added'][] = [
			'not_id'        => 1,
			'text_id'       => 513,
			'not_text'      => 'text',
			'not_text_user' => 'user text',
			'title'         => 'title',
			'notstart'      => 10,
			'end'           => 20,
			'sharh'         => 'sharh'
		];
		$data['notes']['edited'][] = [
			'not_id'        => 12,
			//'text_id'       => 513,
			'not_text'      => 'text',
			'not_text_user' => 'user text',
			'title'         => 'title',
			'notstart'      => 10,
			'end'           => 20,
			'sharh'         => 'sharh'
		];
		$data['notes']['deleted'] = [5,6,7,8,9];
		
		//============== sounds ===================//
		$data['sounds']['added'][] = [
			'text_id' => 514
		];
		$data['sounds']['deleted'] = [513];			
		
		
		$this->output
            ->set_content_type('application/json')
            ->set_status_header(200)
            ->set_output($this->MakeJSON($data));
	}
	/*===================================
		OTHER HELPERS
	===================================*/
    public function rateApp($rating=0){
		$data = $this->input->post();
		
		if( empty($data) )
			throw new Exception("اطلاعات ارسالی صحیح نیست" , 1);
		
		$this->load->library('form_validation');
		$this->load->library('myformvalidator');
		
		$this->form_validation->set_rules('rating' , 'ستاره' , 'trim|numeric|greater_than[0]|less_than[6]');
		$this->myformvalidator->set_rules('mac'    , 'mac'   , 'trim|xss_clean|required|valid_mac');
		$this->form_validation->set_rules('text'   , 'نظر'   , 'trim|xss_clean|required');
		$this->form_validation->set_rules('name'   , 'نام'   , 'trim|xss_clean|max_length[50]');
		$this->form_validation->set_rules('email'  , 'ایمیل' , 'trim|xss_clean|valid_email');
	
		if( $this->form_validation->run() == FALSE )
			throw new Exception( implode('|',$this->form_validation->error_array()) , 2);
		
		$mac    = $this->input->post('mac');
		$rating = $this->input->post('rating');
		$text   = $this->input->post('text');
		$name   = $this->input->post('name');
		$email  = $this->input->post('email');
		
		$where = array(
			'ip'     => $mac, 
			'table'  => 'APP',
			'row_id' => 0
		);
		
		$commentData = array(
			'user_id'   => 0,
			'ip'        => $mac, 
			'table'     => 'APP',
			'row_id'    => 0,
			'submitted' => 1,
			'name'      => $name,
			'email'     => $email,
			'text'      => $text,
			'date'      => date('Y-m-d H:i:s'),
			'parent'    => 0,
		);
		
		$rateData = array(
			'user_id' => 0,
			'ip'      => $mac, 
			'table'   => 'APP',
			'row_id'  => 0,
			'rating'  => $rating
		);
		
		$this->db->select('c.id, cr.rate_id');
		$this->db->where($where);
		$this->db->join('ci_comment_rate cr','c.id=cr.comment_id','left',FALSE);
		$comment = $this->db->get('comments c',1)->row();
		
		if(isset($comment->id))
		{
			$this->db->where('id',$comment->id)->update('comments',$commentData);
			$comment_id = $comment->id;
		}
		else
		{
			$this->db->insert('comments',$commentData);
			$comment_id = $this->db->insert_id(); 
		}
		
		if(isset($comment->rate_id) && $this->db->where('id',(int)$comment->rate_id)->count_all_results('rates'))
		{
			$this->db->where('id',(int)$comment->rate_id)->update('rates',$rateData);
		}
		else
		{
			$this->db->insert('rates',$rateData);
			$rate_id = $this->db->insert_id();
			
			$this->db->insert('comment_rate',[
				'comment_id' => $comment_id,
				'rate_id'    => $rate_id
			]);
		}
		
        $this->db->select("COUNT(r.id) AS total_rates");
        $this->db->select("ROUND((AVG(r.rating)),1) AS app_rating",FALSE);
		
		$this->db->where('r.table','APP');
		$this->db->where('r.rating !=',0);
		$this->db->where('r.row_id',0);
		
		$data = $this->db->get('rates r',1)->row();
		
		$this->tools->outS(0,"نظر شما ثبت شد",['data'=>$data]);	
    }	
	public function getNotification($type='unread'){
		$posts = $this->post->getPosts([
			'type'     => 'notification',
			'order'    => 'p.date_modified desc',
			'views'    => FALSE,
			'comments' => FALSE,
			'likes'    => FALSE,
			'rating'   => FALSE
		]);
	
        $this->tools->outS(0,NULL,['data'=>$posts]);
	}
    public function getSetting(){
        $allowed = array(
            'title',
            'meta_key',
            'meta_description',
            'slogan',
            'time_format',
            'date_format',
            'time_zone',
            'site_logo',
            'default_user_avatar',
            'default_category_pic',
            'default_post_thumb',
            'site_tel',
            'site_email',
            'site_address',
            'site_map_address',
            'site_about',
            'site_facebook',
            'site_google_plus',
            'site_twitter',
            'site_instagram',
            'site_pinterest',
            'site_linkedin',
            'app_last_version',
            'app_file',
            'tz_offset',
        );

        $files = array(
            'site_logo',
            'default_user_avatar',
            'default_category_pic',
            'default_post_thumb',
        );

        $setting = array_intersect_key($this->setting,array_flip($allowed));

        foreach ($files as $k)
        $setting[$k] = base_url() . $setting[$k];

        $this->tools->outS(0,NULL,['data'=>$setting]);
    }
	/*===================================
		PRIVATE FUNCTIONS
	===================================*/	
	private function _check_mobile($mobile){
		
		if( substr($mobile,0,3) == '+98' )
		{
			if( strlen($mobile) != 13 )
				throw new Exception( "شماره موبایل با پیشوند +98 باید 13 رقم باشد" , 1);
		}
		elseif( substr($mobile,0,1) == '0' )
		{
			if( strlen($mobile) != 11 )
				throw new Exception( "شماره موبایل بدون پیشوند +98 باید 11 رقم باشد" , 1);
			
			$mobile = '+98' . substr($mobile,1,11);				
		}
		else
			throw new Exception( "شماره موبایل معتبر نیست" , 2);
		
		return $mobile;
	}
	private function _outFile($status,$done,$msg,$filename='book',$data=NULL){
		$result = array(
			'done'   => $done,
			'status' => $status ,
			'msg'    => $msg
		);
		
		if( is_array($data) ) $result = array_merge($result,$data);
		
		header('Content-Disposition: attachment; filename="'.$filename.'"');
		
		$this->output->set_content_type('application/java-archive')->set_output($this->MakeJSON($result));			
	}
	private function _loginNeed($post=TRUE, $select=NULL){
		if($post)
		{
			$mac   = $this->input->post('mac');
			$token = $this->input->post('token');			
		}
		else
		{
			$mac   = $this->input->get('mac');
			$token = $this->input->get('token');
			$mac = $this->_valid_mac($mac);
		}
		if($mac == '' OR $token == '') 
			return FALSE;
		
		if($select === NULL)
			$this->db->select('u.*');
		else
			$this->db->select($select);
		
		$this->db->join('ci_users u','u.id=l.user_id','inner',FALSE);
		$this->db->where([
			'l.mac'   => $mac,
			//'l.token' => $token
		]);
		
		$user = $this->db->get('logged_in l')->row();
		
		return isset($user->id) ? $user : FALSE;
	}
	
	private function _valid_mac($mac){
		return $mac;//Alireza Balvardi
		if(strlen(str_replace(array(':','-','.'),'',$mac)) !== 12)
			return FALSE;
		
		if (
			preg_match('/^([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}$/', $mac) OR
			preg_match('/^([a-fA-F0-9]{2}\-){5}[a-fA-F0-9]{2}$/', $mac) OR
			preg_match('/^[a-fA-F0-9]{12}$/', $mac) OR
			preg_match('/^([a-fA-F0-9]{4}\.){2}[a-fA-F0-9]{4}$/', $mac)
		){
			$mac = $this->_normalize_mac($mac);
			if(strlen($mac)===17) return $mac;
		} 
		
		return FALSE;
	}
	private function _normalize_mac($mac){
		$mac =  str_replace(".", "", $mac);
		$mac =  str_replace("-", ":", $mac);

		$colon_count = substr_count ($mac , ":");

		if ($colon_count == 0)
		{
			$mac =  substr_replace($mac, ":", 2, 0);
			$mac =  substr_replace($mac, ":", 5, 0);
			$mac =  substr_replace($mac, ":", 8, 0);
			$mac =  substr_replace($mac, ":", 11, 0);
			$mac =  substr_replace($mac, ":", 14, 0);
		}
		
		return strtoupper($mac);
	}
	private function MakeJSON($data){
		return json_encode($data,JSON_UNESCAPED_UNICODE | JSON_HEX_QUOT | JSON_HEX_TAG);
	}
	private function LogMe($data){
		$fp = fopen('LogMe/data-'.date("Ymd-H-i").'.txt', 'a+');
		fwrite($fp, print_r($data,true)."\n");
		fclose($fp);
	}
}
?>